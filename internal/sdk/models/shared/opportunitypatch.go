// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/epilot-dev/terraform-provider-epilot-opportunity/internal/sdk/internal/utils"
	"time"
)

type OpportunityPatchDates struct {
	Tags  []string   `json:"_tags,omitempty"`
	Dates *string    `json:"dates,omitempty"`
	Value *time.Time `json:"value,omitempty"`
}

func (o OpportunityPatchDates) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpportunityPatchDates) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpportunityPatchDates) GetTags() []string {
	if o == nil {
		return nil
	}
	return o.Tags
}

func (o *OpportunityPatchDates) GetDates() *string {
	if o == nil {
		return nil
	}
	return o.Dates
}

func (o *OpportunityPatchDates) GetValue() *time.Time {
	if o == nil {
		return nil
	}
	return o.Value
}

type OpportunityPatchSource struct {
	Href  *string `default:"null" json:"href"`
	Title *string `default:"manual" json:"title"`
}

func (o OpportunityPatchSource) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpportunityPatchSource) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpportunityPatchSource) GetHref() *string {
	if o == nil {
		return nil
	}
	return o.Href
}

func (o *OpportunityPatchSource) GetTitle() *string {
	if o == nil {
		return nil
	}
	return o.Title
}

type OpportunityPatch struct {
	Address          *BaseRelationRef        `json:"address,omitempty"`
	BillingAddress   *BaseRelationRef        `json:"billing_address,omitempty"`
	CurrentTask      *string                 `default:"open" json:"current_task"`
	Customer         *BaseRelation           `json:"customer,omitempty"`
	Dates            []OpportunityPatchDates `json:"dates,omitempty"`
	DeliveryAddress  *BaseRelationRef        `json:"delivery_address,omitempty"`
	Items            *BaseRelation           `json:"items,omitempty"`
	OpportunityTitle *string                 `json:"opportunity_title,omitempty"`
	Payment          *BaseRelationRef        `json:"payment,omitempty"`
	Source           *OpportunityPatchSource `json:"source,omitempty"`
	SourceType       *string                 `default:"manual" json:"source_type"`
	Status           *string                 `default:"open" json:"status"`
}

func (o OpportunityPatch) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(o, "", false)
}

func (o *OpportunityPatch) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &o, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *OpportunityPatch) GetAddress() *BaseRelationRef {
	if o == nil {
		return nil
	}
	return o.Address
}

func (o *OpportunityPatch) GetBillingAddress() *BaseRelationRef {
	if o == nil {
		return nil
	}
	return o.BillingAddress
}

func (o *OpportunityPatch) GetCurrentTask() *string {
	if o == nil {
		return nil
	}
	return o.CurrentTask
}

func (o *OpportunityPatch) GetCustomer() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Customer
}

func (o *OpportunityPatch) GetDates() []OpportunityPatchDates {
	if o == nil {
		return nil
	}
	return o.Dates
}

func (o *OpportunityPatch) GetDeliveryAddress() *BaseRelationRef {
	if o == nil {
		return nil
	}
	return o.DeliveryAddress
}

func (o *OpportunityPatch) GetItems() *BaseRelation {
	if o == nil {
		return nil
	}
	return o.Items
}

func (o *OpportunityPatch) GetOpportunityTitle() *string {
	if o == nil {
		return nil
	}
	return o.OpportunityTitle
}

func (o *OpportunityPatch) GetPayment() *BaseRelationRef {
	if o == nil {
		return nil
	}
	return o.Payment
}

func (o *OpportunityPatch) GetSource() *OpportunityPatchSource {
	if o == nil {
		return nil
	}
	return o.Source
}

func (o *OpportunityPatch) GetSourceType() *string {
	if o == nil {
		return nil
	}
	return o.SourceType
}

func (o *OpportunityPatch) GetStatus() *string {
	if o == nil {
		return nil
	}
	return o.Status
}
